import { generateResponse } from "./api";
import { Property } from "./mockData";

export interface ChatMessage {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: string;
  properties?: Property[];
  inspirationImages?: InspirationImage[];
}

export interface InspirationImage {
  id: string;
  title: string;
  image: string;
  description: string;
}

export function createMessage(
  content: string,
  isUser: boolean,
  properties?: Property[],
  inspirationImages?: InspirationImage[]
): ChatMessage {
  return {
    id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
    content,
    isUser,
    timestamp: new Date().toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit",
    }),
    properties,
    inspirationImages,
  };
}

// ✅ 修改后的 generateAgentResponse —— 支持图片字段
export async function generateAgentResponse(userMessage: string): Promise<{
  message: string;
  properties: Property[];
  inspirationImages: InspirationImage[];
}> {
  try {
    const data = await generateResponse(userMessage);
    console.log("🔍 Backend response:", data);

    const reply = data.ai_response || data.message || "I’m here to help you.";

    const images: InspirationImage[] = [];

    // ✅ 自动识别后端返回的图片路径（如 map_image 或 image_path）
    const imagePath =
      data.map_image || data.image_path || data.generated_image || null;

    if (imagePath) {
      const fullUrl = imagePath.startsWith("http")
        ? imagePath
        : `http://localhost:8000${imagePath.startsWith("/") ? "" : "/"}${imagePath}`;

      images.push({
        id: Date.now().toString(),
        title: "Generated Visualization",
        image: fullUrl,
        description: "Image generated by AI backend",
      });
    }

    return {
      message: reply,
      properties: [],
      inspirationImages: images,
    };
  } catch (error) {
    console.error("❌ Failed to get AI response:", error);
    return {
      message: "Sorry, I’m having trouble connecting to the AI service.",
      properties: [],
      inspirationImages: [],
    };
  }
}
